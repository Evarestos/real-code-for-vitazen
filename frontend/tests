import React from 'react';
import { render, fireEvent, waitFor, screen } from '@testing-library/react';
import AIAssistant from './AIAssistant';
import { I18nextProvider } from 'react-i18next';
import i18n from '../config/i18n';
import { getAIResponse } from '../services/aiService';

jest.mock('../services/aiService');

describe('AIAssistant', () => {
  it('renders correctly', () => {
    render(
      <I18nextProvider i18n={i18n}>
        <AIAssistant onNotification={() => {}} />
      </I18nextProvider>
    );
    expect(screen.getByText('AI Βοηθός')).toBeInTheDocument();
    expect(screen.getByPlaceholderText('Ρώτησέ με οτιδήποτε...')).toBeInTheDocument();
  });

  it('sends message and displays response', async () => {
    getAIResponse.mockResolvedValue('AI response');
    render(
      <I18nextProvider i18n={i18n}>
        <AIAssistant onNotification={() => {}} />
      </I18nextProvider>
    );
    
    const input = screen.getByPlaceholderText('Ρώτησέ με οτιδήποτε...');
    fireEvent.change(input, { target: { value: 'Hello AI' } });
    fireEvent.click(screen.getByText('Αποστολή'));

    await waitFor(() => {
      expect(screen.getByText('Εσύ')).toBeInTheDocument();
      expect(screen.getByText('Hello AI')).toBeInTheDocument();
    });

    await waitFor(() => {
      expect(screen.getByText('AI response')).toBeInTheDocument();
    });
  });

  it('handles error when sending message', async () => {
    getAIResponse.mockRejectedValue(new Error('API Error'));
    const mockNotification = jest.fn();
    render(
      <I18nextProvider i18n={i18n}>
        <AIAssistant onNotification={mockNotification} />
      </I18nextProvider>
    );
    
    const input = screen.getByPlaceholderText('Ρώτησέ με οτιδήποτε...');
    fireEvent.change(input, { target: { value: 'Hello AI' } });
    fireEvent.click(screen.getByText('Αποστολή'));

    await waitFor(() => {
      expect(mockNotification).toHaveBeenCalledWith('Σφάλμα κατά την επικοινωνία με τον AI βοηθό', 'error');
    });
  });
});
